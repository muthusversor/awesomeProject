package main

import (
	"bufio"
	"fmt"
	"os"
	"strconv"
	"strings"
)

func main() {
	scanner := bufio.NewScanner(os.Stdin)

	for {
		fmt.Println("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—Ä:") // –°—á–∏—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥
		scanner.Scan()                 // –°–∫–∞–Ω–∏—Ä—É–µ–º –≤–≤–æ–¥
		input := scanner.Text()        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –≤–≤–æ–¥–∞

		if input == "" {
			fmt.Println("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.") // –ï—Å–ª–∏ –≤–≤–æ–¥ –ø—É—Å—Ç–æ–π, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É
			return
		}

		result, err := calculate(input) // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é calculate –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
		if err != nil {
			fmt.Println("Error:", err)
		} else {
			fmt.Printf("–†–µ–∑—É–ª—å—Ç–∞—Ç: %d\n", result)
		}
	}
}

func calculate(input string) (int, error) {
	parts := strings.Split(input, " ") // –†–∞–∑–¥–µ–ª—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –Ω–∞ —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∏–µ —á–∞—Å—Ç–∏

	if len(parts) != 3 {
		return 0, fmt.Errorf("–ü–∞–Ω–∏–∫–∞!!!üò±üò±üò± –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥") // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
	}

	a, err := convertToNumber(parts[0]) // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å –ø—Ä–∏–º–µ—Ä–∞ –≤ —á–∏—Å–ª–æ
	if err != nil {
		return 0, err
	}

	op := parts[1] // –ü–æ–ª—É—á–∞–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä

	b, err := convertToNumber(parts[2]) // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ç–æ—Ä—É—é —á–∞—Å—Ç—å –ø—Ä–∏–º–µ—Ä–∞ –≤ —á–∏—Å–ª–æ
	if err != nil {
		return 0, err
	}

	var result int // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–∏–ø–∞ int

	switch op { // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞–Ω–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
	case "+":
		result = a + b
	case "-":
		result = a - b
	case "*":
		result = a * b
	case "/":
		if b == 0 {
			return 0, fmt.Errorf("–ü–∞–Ω–∏–∫–∞!!!üò±üò±üò± –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å") // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
		} // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –¥–µ–ª–µ–Ω–∏–∏ –Ω–∞ 0
		result = a / b
	default:
		return 0, fmt.Errorf("–ü–∞–Ω–∏–∫–∞!!!üò±üò±üò± –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è") // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
	}

	return result, nil // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
}

func convertToNumber(input string) (int, error) {
	arabicToRoman := map[string]int{ // –°–æ–∑–¥–∞–µ–º map –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ä–∏–º—Å–∫–∏—Ö —á–∏—Å–µ–ª –≤ –∞—Ä–∞–±—Å–∫–∏–µ
		"I":    1,
		"II":   2,
		"III":  3,
		"IV":   4,
		"V":    5,
		"VI":   6,
		"VII":  7,
		"VIII": 8,
		"IX":   9,
		"X":    10,
	}

	if num, ok := arabicToRoman[input]; ok { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ —Ä–∏–º—Å–∫–∏–º
		return num, nil
	}

	if a, err := strconv.Atoi(input); err == nil { // –ü—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –≤ —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç
		return a, nil
	}

	return 0, fmt.Errorf("–ü–∞–Ω–∏–∫–∞!!!üò±üò±üò± –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥: %s", input)
}
