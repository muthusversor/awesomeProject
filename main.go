package main

import (
	"bufio"
	"fmt"
	"os"
	"strconv"
	"strings"
)

// Panic –æ–ø–∏—Å—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –¥–ª—è –ø–∞–Ω–∏—á–µ—Å–∫–æ–≥–æ –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã
type Panic struct {
	message string
}

func (p Panic) Error() string {
	return p.message
}

// arabicToRoman —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–∏–º—Å–∫–∏—Ö —Ü–∏—Ñ—Ä –∏ –∞—Ä–∞–±—Å–∫–∏—Ö —á–∏—Å–µ–ª
var arabicToRoman = map[string]int{
	"I":    1,
	"II":   2,
	"III":  3,
	"IV":   4,
	"V":    5,
	"VI":   6,
	"VII":  7,
	"VIII": 8,
	"IX":   9,
	"X":    10,
}

// romanNumerals —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–∞—Ä—ã –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∞—Ä–∞–±—Å–∫–∏—Ö —á–∏—Å–µ–ª –≤ —Ä–∏–º—Å–∫–∏–µ
var romanNumerals = []struct {
	Value  int
	Symbol string
}{
	{1000, "M"},
	{900, "CM"},
	{500, "D"},
	{400, "CD"},
	{100, "C"},
	{90, "XC"},
	{50, "L"},
	{40, "XL"},
	{10, "X"},
	{9, "IX"},
	{5, "V"},
	{4, "IV"},
	{1, "I"},
}

func main() {
	scanner := bufio.NewScanner(os.Stdin)

	for {
		fmt.Println("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—Ä:")
		scanner.Scan()
		input := scanner.Text()

		if input == "" {
			fmt.Println("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
			return
		}

		result, err := calculate(input)
		if err != nil {
			fmt.Println("Error:", err)
		} else {
			fmt.Printf("–†–µ–∑—É–ª—å—Ç–∞—Ç: %v\n", result)
		}
	}
}

// calculate –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –≤—ã—Ä–∞–∂–µ–Ω–∏–µ–º, –≤—ã—á–∏—Å–ª—è–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
func calculate(input string) (interface{}, error) {
	parts := strings.Split(input, " ")

	if len(parts) != 3 {
		return nil, Panic{"–ü–∞–Ω–∏–∫–∞!!! üò±üò±üò± –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥"}
	}

	if isMixed(parts[0], parts[2]) {
		return nil, Panic{"–ü–∞–Ω–∏–∫–∞!!! üò±üò±üò± –ù–µ–ª—å–∑—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Ä–∏–º—Å–∫–∏–µ –∏ –∞—Ä–∞–±—Å–∫–∏–µ —á–∏—Å–ª–∞"}
	}

	a, err := convertToNumber(parts[0])
	if err != nil {
		return nil, err
	}

	op := parts[1]

	b, err := convertToNumber(parts[2])
	if err != nil {
		return nil, err
	}

	var result int

	switch op {
	case "+":
		result = a + b
	case "-":
		result = a - b
	case "*":
		result = a * b
	case "/":
		if b == 0 {
			return nil, Panic{"–ü–∞–Ω–∏–∫–∞!!! üò±üò±üò± –î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å"}
		}
		result = a / b
	default:
		return nil, Panic{"–ü–∞–Ω–∏–∫–∞!!! üò±üò±üò± –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è"}
	}

	if isRoman(parts[0]) || isRoman(parts[2]) {
		return convertToRoman(result)
	}

	return result, nil
}

// convertToNumber –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ —á–∏—Å–ª–æ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫—É
func convertToNumber(input string) (int, error) {
	if isRoman(input) {
		return arabicToRoman[input], nil
	}

	a, err := strconv.Atoi(input)
	if err != nil {
		return 0, Panic{"–ü–∞–Ω–∏–∫–∞!!! üò±üò±üò± –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥: " + input}
	}

	if a < 1 || a > 10 {
		return 0, Panic{"–ü–∞–Ω–∏–∫–∞!!! üò±üò±üò± –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥: " + input}
	}

	return a, nil
}

// isRoman –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Ä–∏–º—Å–∫–∏–º —á–∏—Å–ª–æ–º
func isRoman(input string) bool {
	_, ok := arabicToRoman[input]
	return ok
}

// isMixed –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∫–∞–∫ —Ä–∏–º—Å–∫–∏–µ, —Ç–∞–∫ –∏ –∞—Ä–∞–±—Å–∫–∏–µ —á–∏—Å–ª–∞
func isMixed(input1, input2 string) bool {
	hasRoman1 := isRoman(input1)
	hasRoman2 := isRoman(input2)

	return hasRoman1 && !hasRoman2 || !hasRoman1 && hasRoman2
}

// convertToRoman –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∞—Ä–∞–±—Å–∫–æ–µ —á–∏—Å–ª–æ –≤ —Ä–∏–º—Å–∫–æ–µ
func convertToRoman(input int) (string, error) {
	if input <= 0 {
		return "", Panic{"–ü–∞–Ω–∏–∫–∞!!! üò±üò±üò± –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–ª–∏ –Ω–æ–ª—å"}
	}

	result := ""
	for _, numeral := range romanNumerals {
		for input >= numeral.Value {
			result += numeral.Symbol
			input -= numeral.Value
		}
	}

	return result, nil
}
